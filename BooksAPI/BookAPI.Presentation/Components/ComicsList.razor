@using BookAPI.Presentation.Data
@using System.Text.Json
@using System.Net
@using BookAPI.Presentation.Contracts
@inject IHttpClientFactory ClientFactory
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager

    @if (_error || _comics is null)
    {
        <h3>Unable to get comics. Please try again later.</h3>
    }
    else
    {
        <div class="row">
            @foreach (var comic in _comics.Reverse())
            {
                <div class="col-3">
                    <div class="card" style="margin-bottom: 25px">
                        <div class="card-header">
                            <h5 class="card-title text-center">@comic.Title</h5>
                            <h5 class="card-subtitle text-center">Author: @comic.Author</h5>
                        </div>
                        <div class="card-body">
                            <h5>Total volumes: @comic.TotalVolumes</h5>
                            <h5>Publishing status: @comic.PublishingStatus</h5>
                            <h5>Demographic type: @comic.DemographicType</h5>
                            <h5>Reading status: @comic.ReadingStatus</h5>
                            <div class="card-footer">
                                <button type="submit" class="btn btn-primary" @onclick="() => ButtonHandler(comic)">Update</button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }

@code {
    private IEnumerable<ComicResponse>? _comics = Array.Empty<ComicResponse>();
    private bool _shouldRender = false;
    private bool _error = false;

    protected override bool ShouldRender() => _shouldRender;

    private void ButtonHandler(ComicResponse comicResponse)
    {
        NavigationManager.NavigateTo($"/updateComic/{comicResponse.Id.ToString()}");
    }

    protected override async Task OnInitializedAsync()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, Configuration["ApiUri:Comics:GetAllComicsUri"]);

        var client = ClientFactory.CreateClient();


        try
        {
            HttpResponseMessage response = await client.SendAsync(request);
            if (response.IsSuccessStatusCode)
            {
                using var responseStream = await response.Content.ReadAsStreamAsync();

                _comics = await JsonSerializer.DeserializeAsync<IEnumerable<ComicResponse>>(responseStream);

                _shouldRender = true;
            }
            else
            {
                _error = true;
                _shouldRender = true;
            }
        }
        catch (Exception e)
        {
            _error = true;
            _shouldRender = true;
        }
    }

}