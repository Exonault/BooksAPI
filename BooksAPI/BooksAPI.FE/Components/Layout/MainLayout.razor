@using System.Security.Claims
@using BooksAPI.FE.Interfaces
@inherits LayoutComponentBase

@inject IUserService UserService;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JsRuntime;

<MudThemeProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<div class="page">
    <div class="sidebar">
        <NavMenu/>
    </div>

    <main>
        <AuthorizeView>
            <NotAuthorized>
                <div class="top-row px-4">
                    <a href="/searchLibraryManga">Search manga</a>
                    <a href="/login">Login</a>
                    <a href="/register">Register</a>
                </div>
            </NotAuthorized>
            <Authorized>
                <div class="top-row px-4 d-flex justify-content-between align-items-center">
                    <h4>Kitka @GetUserName(context.User)</h4>
                    <div>
                        <a href="/searchLibraryManga">Search manga</a>
                        <a @onclick="Logout"> Logout</a>
                    </div>
                </div>
            </Authorized>
        </AuthorizeView>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code
{
    private async Task Logout()
    {
        string[] tokens = await JsRuntime.InvokeAsync<string[]>("getTokens");

        await UserService.Logout(tokens[0]);

        await JsRuntime.InvokeVoidAsync("deleteCookie", $"{tokens[0]}", $"{tokens[1]}");

        NavigationManager.NavigateTo("/", true);
    }

    private string GetUserName(ClaimsPrincipal user)
    {
        Claim? claim = user.Claims.FirstOrDefault(c => c.Type == "unique_name");

        if (claim is null)
        {
            return "no name";
        }

        return claim.Value;
    }
}