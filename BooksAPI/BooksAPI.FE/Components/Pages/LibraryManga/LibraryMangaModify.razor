@page "/createLibraryManga"
@page "/updateLibraryManga"

@using System.Text.Json
@using BooksAPI.FE.Authentication
@using BooksAPI.FE.Constants
@using BooksAPI.FE.Extensions
@using BooksAPI.FE.Interfaces
@using BooksAPI.FE.Model

@attribute [Authorize(Policy = ApplicationConstants.PolicyNames.AdminRolePolicyName)]

@inject ILibraryMangaService LibraryMangaService;
@inject IJSRuntime JsRuntime;
@inject NavigationManager NavigationManager;
@inject AuthenticationStateProvider AuthenticationStateProvider;

<PageTitle> @(IsCreate ? "Create" : "Update")</PageTitle>

<h3 class="text-center">
    @(IsCreate ? "Create a new library manga" : "Update library manga")
</h3>

@if (_error)
{
    <MudGrid Justify="Justify.Center">
        <MudItem md="4" xs="4">
            <MudAlert Severity="Severity.Error" ShowCloseIcon="true" CloseIconClicked="(() => CloseAlert())">
                @(IsCreate ? "Unable to create manga. Try again later" : "Unable to update manga. Try again later")
            </MudAlert>
        </MudItem>
    </MudGrid>
}

@if (_createSuccess)
{
    <MudGrid Justify="Justify.Center">
        <MudItem md="4" xs="4">
            <MudAlert Severity="Severity.Info" ShowCloseIcon="true" CloseIconClicked="(() => CloseAlert())">
                Create successful
            </MudAlert>
        </MudItem>
    </MudGrid>
}

@if (_isDataFetched && !_error)
{
    <EditForm Model="_model" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator/>

        @if (context.GetValidationMessages().Count() != 0)
        {
            <MudGrid Justify="Justify.Center">
                <MudItem md="4" xs="4">
                    <MudAlert Severity="Severity.Error">
                        <ValidationSummary/>
                    </MudAlert>
                </MudItem>
            </MudGrid>
        }
        <MudGrid Justify="Justify.Center">
            <MudItem xs="6">
                <div class="d-flex col-12">
                    <MudTextField T="string" Label="Title in Romaji" InputType="InputType.Text" Variant="Variant.Text" Class="mr-3"
                                  @bind-Value="_model.TitleRomaji"/>
                    <MudTextField T="string" Label="Title in English" InputType="InputType.Text" Variant="Variant.Text" Class="mr-3"
                                  @bind-Value="_model.TitleEnglish"/>
                    <MudTextField T="string" Label="Title in Japanese" InputType="InputType.Text" Variant="Variant.Text" Class="mr-3"
                                  @bind-Value="_model.TitleJapanese"/>
                </div>
                <div class="d-flex col-12">
                    <MudSelect T="string" Label="Demographic type" Variant="Variant.Text" AnchorOrigin="Origin.BottomCenter" Class="mr-3"
                               @bind-Value="_model.DemographicType">
                        <MudSelectItem Value="@LibraryMangaConstants.DemographicType.Shounen">Shounen</MudSelectItem>
                        <MudSelectItem Value="@LibraryMangaConstants.DemographicType.Shoujo">Shoujo</MudSelectItem>
                        <MudSelectItem Value="@LibraryMangaConstants.DemographicType.Seinen">Seinen</MudSelectItem>
                        <MudSelectItem Value="@LibraryMangaConstants.DemographicType.Josei">Josei</MudSelectItem>
                    </MudSelect>

                    <MudSelect T="string" Label="Type" Variant="Variant.Text" AnchorOrigin="Origin.BottomCenter" Class="mr-3"
                               @bind-Value="_model.Type">
                        <MudSelectItem Value="@LibraryMangaConstants.Type.Manga">Manga</MudSelectItem>
                        <MudSelectItem Value="@LibraryMangaConstants.Type.LightNovel">Light novel</MudSelectItem>
                        <MudSelectItem Value="@LibraryMangaConstants.Type.OneShot">One shot</MudSelectItem>
                    </MudSelect>

                    <MudSelect T="string" Label="Publishing status" Variant="Variant.Text" AnchorOrigin="Origin.BottomCenter"
                               @bind-Value="_model.PublishingStatus">
                        <MudSelectItem Value="@LibraryMangaConstants.PublishingType.Publishing">Publishing</MudSelectItem>
                        <MudSelectItem Value="@LibraryMangaConstants.PublishingType.Finished">Finished</MudSelectItem>
                        <MudSelectItem Value="@LibraryMangaConstants.PublishingType.OnHiatus">On Hiatus</MudSelectItem>
                    </MudSelect>
                </div>

                <div class="d-flex col-12">
                    <MudTextField T="string" Label="First volume image URL" Variant="Variant.Text" InputType="InputType.Text" Class="mr-3"
                                  @bind-Value="_model.MainImageUrl"/>
                    <MudNumericField T="int?" HideSpinButtons="true" Min="0" Label="Total volumes" Variant="Variant.Text"
                                     @bind-Value="_model.TotalVolumes"/>
                </div>

                <MudTextField T="string" Label="Synopsis" InputType="InputType.Text" Variant="Variant.Text" AutoGrow
                              @bind-Value="_model.Synopsis"/>
                
                <MudText Typo="Typo.h6" Class="mt-3 text-center">Authors</MudText>

                @foreach (AuthorModel modelAuthor in _model.Authors)
                {
                    <div class="d-flex align-items-end col-12 mb-3">
                        <MudTextField T="string" Label="First name" Variant="Variant.Text" InputType="InputType.Text" Class="mr-4"
                                      @bind-Value="modelAuthor.FirstName"/>
                        <MudTextField T="string" Label="Last name" Variant="Variant.Text" InputType="InputType.Text" Class="mr-4"
                                      @bind-Value="modelAuthor.LastName"/>
                        <MudSelect T="string" Label="Role" Variant="Variant.Text" AnchorOrigin="Origin.BottomCenter" Class="mr-4"
                                   @bind-Value="modelAuthor.Role">
                            <MudSelectItem Value="@AuthorConstants.AuthorRole.Story">Story</MudSelectItem>
                            <MudSelectItem Value="@AuthorConstants.AuthorRole.Art">Art</MudSelectItem>
                            <MudSelectItem Value="@AuthorConstants.AuthorRole.StoryAndArt">Story and Art</MudSelectItem>
                        </MudSelect>
                        <MudButton Variant="Variant.Filled" Class="h-75" Style="flex-shrink: 0;" Color="Color.Primary" OnClick="@(() => RemoveAuthor(modelAuthor))">Remove author</MudButton>
                    </div>
                }
                <div class="d-flex justify-content-center">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddAuthor">Add author</MudButton>
                </div>
                <br/>
                <br/>
                <div class="d-flex justify-content-center">
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">@(IsCreate ? "Create" : "Update")</MudButton>
                </div>
            </MudItem>
        </MudGrid>

    </EditForm>
}
else if (!_isDataFetched)
{
    <div class="mt-4">
        <MudProgressLinear Color="Color.Primary" Size="Size.Large" Indeterminate="true" Class="my-7"/>
    </div>
}

@code {
    private bool IsCreate;

    private LibraryMangaModel _model = new();

    private bool _shouldRender = false;
    protected override bool ShouldRender() => _shouldRender;

    private bool _error;
    private bool _createSuccess;
    private bool _isDataFetched;

    private string _token;
    private string _refreshToken;

    private int _id;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            string[] tokens = await JsRuntime.InvokeAsync<string[]>("getTokens");
            _token = tokens[0];
            _refreshToken = tokens[1];

            NavigationManager.GetQueryString<int>("libraryMangaId", out _id);

            IsCreate = _id == 0;

            if (!IsCreate)
            {
                _model = await LibraryMangaService.GetMangaModel(_id);
                _isDataFetched = true;
            }

            _isDataFetched = true;
            _shouldRender = true;
            StateHasChanged();
        }
        catch (Exception e)
        {
            _error = true;
            _shouldRender = true;
            _isDataFetched = true;
            StateHasChanged();
        }
    }

    private async void OnValidSubmit()
    {
        try
        {
            string serialize = JsonSerializer.Serialize(_model);
            Console.WriteLine(serialize);

            if (IsCreate)
            {
                _createSuccess = await LibraryMangaService.CreateManga(_model, _token, _refreshToken);
                if (!_createSuccess)
                {
                    _error = true;
                }
                StateHasChanged();
            }
            else
            {
                bool updateSuccess = await LibraryMangaService.UpdateManga(_id, _model, _token, _refreshToken);

                if (updateSuccess)
                {
                    NavigationManager.NavigateTo("/libraryMangas/1");
                }
                else
                {
                    _error = true;
                    StateHasChanged();
                }
            }
        }
        catch (InvalidOperationException e)
        {
            ((CustomAuthenticationStateProvider)AuthenticationStateProvider).UpdateUserState("");

            NavigationManager.NavigateTo("/", true);
        }
        catch (Exception e)
        {
            _error = true;
            StateHasChanged();
        }
    }

    private void RemoveAuthor(AuthorModel author)
    {
        _model.Authors.Remove(author);
        _shouldRender = true;
        StateHasChanged();
    }

    private void AddAuthor()
    {
        _model.Authors.Add(new AuthorModel());
        _shouldRender = true;
        StateHasChanged();
    }
    
    private void CloseAlert()
    {
        _error = false;
        StateHasChanged();
    }

}