@page "/libraryMangaInfo/{id:int}"

@attribute [AllowAnonymous]
@using BooksAPI.FE.Contracts.Author
@using BooksAPI.FE.Contracts.LibraryManga
@using BooksAPI.FE.Interfaces
@using BooksAPI.FE.Util

@inject ILibraryMangaService LibraryMangaService;
<h3 class="text-center">Information</h3>

@if (_isDataFetched)
{
    @if (_error)
    {
        <MudGrid Justify="Justify.Center">
            <MudItem md="4" xs="4">
                <MudAlert Severity="Severity.Error" ShowCloseIcon="true" CloseIconClicked="(() => CloseAlert())">
                    Unable to get mangas. Please try again later.
                </MudAlert>
            </MudItem>
        </MudGrid>
    }
    else
    {
        //Put an info page

        <MudContainer MaxWidth="MaxWidth.Medium">
            <div class="d-flex flex-wrap mt-1">
                <div class="d-flex flex-column align-items-start mr-2">
                    <MudImage Src="@manga.MainImageUrl" Width="250" Height="350" Class="border border-dark"/>
                </div>
                <div class="col-12 col-md-6">
                    <div class="row mb-2">
                        <div class="col">
                            <MudText Typo="Typo.h6">Title</MudText>
                            <MudText Typo="Typo.body1">@manga.Title</MudText>
                        </div>
                        <div class="col">
                            <MudText Typo="Typo.h6">Demographic</MudText>
                            <MudText Typo="Typo.body1">@manga.DemographicType</MudText>
                        </div>
                    </div>
                    <div class="row mb-2">
                        <div class="col">
                            <MudText Typo="Typo.h6">Type</MudText>
                            <MudText Typo="Typo.body1">@FormatterUtil.FormatType(manga.Type)</MudText>
                        </div>
                        <div class="col">
                            <MudText Typo="Typo.h6">Publishing status</MudText>
                            <MudText Typo="Typo.body1">@FormatterUtil.FormatPublishingStatus(manga.PublishingStatus)</MudText>
                        </div>
                    </div>
                    <div class="row mb-2">
                        <div class="col">
                            <MudText Typo="Typo.h6">Authors</MudText>
                            @foreach (AuthorResponse author in manga.Authors)
                            {
                                <MudText Typo="Typo.body1">@FormatterUtil.FormatAuthor(author)</MudText>
                            }
                        </div>
                        <div class="col">
                            <MudText Typo="Typo.h6">Total volumes</MudText>
                            <MudText Typo="Typo.body1">@FormatterUtil.FormatTotalVolumes(manga.TotalVolumes)</MudText>
                        </div>
                    </div>
                </div>
            </div>
        </MudContainer>
    }
}
else
{
    <div class="mt-4">
        <MudProgressLinear Color="Color.Primary" Size="Size.Large" Indeterminate="true" Class="my-7"/>
    </div>
}

@code {

    [Parameter]
    public int Id { get; set; }

    private LibraryMangaResponse manga;

    private bool _shouldRender = false;
    private bool _error = false;
    private bool _isDataFetched = false;

    protected override bool ShouldRender() => _shouldRender;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            manga = await LibraryMangaService.GetManga(Id);
            _shouldRender = true;
            _isDataFetched = true;
        }
        catch (Exception e)
        {
            _error = true;
            _shouldRender = true;
        }
    }

    private void CloseAlert()
    {
        _error = false;
        StateHasChanged();
    }


}