@page "/libraryManga/{pageNumber:int}"
@attribute [AllowAnonymous]

@using BooksAPI.FE.Constants
@using BooksAPI.FE.Contracts.Author
@using BooksAPI.FE.Contracts.LibraryManga
@using BooksAPI.FE.Interfaces
@using BooksAPI.FE.Util
@inject ILibraryMangaService LibraryMangaService;
@inject IJSRuntime JsRuntime;
@inject NavigationManager NavigationManager;
@inject AuthenticationStateProvider AuthenticationStateProvider;


<PageTitle>LibraryManga</PageTitle>

<h3 class="text-center">All Mangas</h3>
@if (_isDataFetched)
{
    @if (_error)
    {
        <MudGrid Justify="Justify.Center">
            <MudItem md="4" xs="4">
                <MudAlert Severity="Severity.Error" ShowCloseIcon="true" CloseIconClicked="(() => CloseAlert())">
                    Unable to get manga. Please try again later.
                </MudAlert>
            </MudItem>
        </MudGrid>
    }
    else
    {
        <AuthorizeView Policy="@ApplicationConstants.PolicyNames.AdminRolePolicyName">
            <Authorized>
                <div class="d-flex justify-content-end mr-5">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary">Add new entry</MudButton>
                </div>
            </Authorized>
        </AuthorizeView>

        <div class="d-flex justify-content-center flex-row mb-5">
            @if (PageNumber != 1)
            {
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mr-2" OnClick="@(() => PageButtons(PageNumber - 1))">Load previous 15</MudButton>
            }
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => PageButtons(PageNumber + 1))">Load next 15</MudButton>
        </div>

        <MudTable Items="_mangas">
            <HeaderContent>
                <MudTh>Cover</MudTh>
                <MudTh>Title</MudTh>
                <MudTh>Authors</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Cover">
                    <MudImage Src="@context.MainImageUrl" Width="100" Height="140" Fluid="true"/>
                </MudTd>
                <MudTd DataLabel="Title" Class="w-50">
                    <MudText Typo="Typo.h6">@context.Title</MudText>
                </MudTd>
                <MudTd DataLabel="Authors">
                    @foreach (AuthorResponse author in context.Authors)
                    {
                        <MudText Typo="Typo.body1" Class="mt-1"> @FormatterUtil.FormatAuthor(author)</MudText>
                    }
                </MudTd>
                <MudTd DataLabel="Actions" Style="width: 15% !important">
                    <AuthorizeView Policy="@ApplicationConstants.PolicyNames.AdminRolePolicyName">
                        <Authorized Context="authorizedContext">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary"
                                       OnClick="@(() => NavigationManager.NavigateTo($""))">
                                Update information
                            </MudButton>
                        </Authorized>
                    </AuthorizeView>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-3"
                               OnClick="@(() => NavigationManager.NavigateTo($"libraryMangaInfo/{context.Id}"))">
                        More information
                    </MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-3"
                               OnClick="@(() => AddToCollectionAction())">
                        Add to collection
                    </MudButton>

                </MudTd>
            </RowTemplate>
        </MudTable>

        <div class="d-flex justify-content-center flex-row mt-5">
            @if (PageNumber != 1)
            {
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mr-2" OnClick="@(() => PageButtons(PageNumber - 1))">Load previous 15</MudButton>
            }
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => PageButtons(PageNumber + 1))">Load next 15</MudButton>
        </div>
    }
}
else
{
    <div class="mt-4">
        <MudProgressLinear Color="Color.Primary" Size="Size.Large" Indeterminate="true" Class="my-7"/>
    </div>
}

@code {

    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }

    [Parameter]
    public int PageNumber { get; set; }

    private IEnumerable<LibraryMangaResponse>? _mangas = Array.Empty<LibraryMangaResponse>();

    private bool _shouldRender = false;
    private bool _error = false;
    private const int Entries = 15;
    private bool _isDataFetched = false;

    protected override bool ShouldRender() => _shouldRender;

    protected override async Task OnInitializedAsync()
    {
        await GetMangas(PageNumber);
        _isDataFetched = true;
    }


    private async Task GetMangas(int page)
    {
        try
        {
            _mangas = await LibraryMangaService.GetMangasForPage(page, Entries);
            _shouldRender = true;
            NavigationManager.NavigateTo($"/libraryManga/{page}");
        }
        catch (Exception e)
        {
            _error = true;
            _shouldRender = true;
        }
    }

    private async Task PageButtons(int page)
    {
        PageNumber = page;
        await GetMangas(page);
        await JsRuntime.InvokeVoidAsync("window.scrollTo", 0, 0);
        StateHasChanged();
    }

    private async Task AddToCollectionAction()
    {
        AuthenticationState state = await AuthenticationState;

        if (!state.User.Identity.IsAuthenticated)
        {
            // NavigationManager.NavigateTo("orders");
        }
        else NavigationManager.NavigateTo("login");
    }

    private void CloseAlert()
    {
        _error = false;
        StateHasChanged();
    }


}