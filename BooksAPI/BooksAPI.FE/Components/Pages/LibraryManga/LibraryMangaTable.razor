@using BooksAPI.FE.Constants
@using BooksAPI.FE.Contracts.Author
@using BooksAPI.FE.Contracts.LibraryManga
@using BooksAPI.FE.Interfaces
@using BooksAPI.FE.Util

@inject NavigationManager NavigationManager;
@inject ILibraryMangaService LibraryMangaService;
@inject IJSRuntime JsRuntime;

<MudTable Items="Mangas">
    <HeaderContent>
        <MudTh>Cover</MudTh>
        <MudTh>Title</MudTh>
        <MudTh>Authors</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Cover">
            <MudImage Src="@GetImageUrl(context.MainImageUrl)" Width="150" Height="210" Fluid="true" Class="border border-dark"/>
        </MudTd>
        <MudTd DataLabel="Title" Class="w-50">
            <MudText Typo="Typo.h6">@context.Title</MudText>
        </MudTd>
        <MudTd DataLabel="Authors">
            @foreach (AuthorResponse author in context.Authors)
            {
                <MudText Typo="Typo.body1" Class="mt-1"> @FormatterUtil.FormatAuthor(author)</MudText>
            }
        </MudTd>
        <MudTd DataLabel="Actions" Style="width: 15% !important;">
            <MudButton Variant="Variant.Filled" Color="Color.Primary"
                       OnClick="@(() => NavigationManager.NavigateTo($"libraryMangaInformation?libraryMangaId={context.Id}"))">
                More information
            </MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-3"
                       OnClick="@(() => AddToCollectionAction(context.Id))">
                Add to collection
            </MudButton>
            <AuthorizeView Policy="@ApplicationConstants.PolicyNames.AdminRolePolicyName">
                <Authorized Context="authorizedContext">
                    <div class="justify-content-center">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-3"
                                   OnClick="@(() => NavigationManager.NavigateTo($"/updateLibraryManga?libraryMangaId={context.Id}"))">
                            Update
                        </MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-3" OnClick="@(() => DeleteManga(context.Id))">
                            Delete
                        </MudButton>
                    </div>
                </Authorized>
            </AuthorizeView>
        </MudTd>
    </RowTemplate>
</MudTable>

@code {

    [Parameter] public IEnumerable<LibraryMangaResponse> Mangas { get; set; }

    [CascadingParameter] private Task<AuthenticationState>? AuthenticationState { get; set; }

    private string _token;
    private string _refreshToken;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            string[] tokens = await JsRuntime.InvokeAsync<string[]>("getTokens");
            _token = tokens[0];
            _refreshToken = tokens[1];
        }
        catch (Exception e)
        {
            StateHasChanged();
        }
    }


    private async Task AddToCollectionAction(int id)
    {
        AuthenticationState state = await AuthenticationState;

        if (state.User.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo($"/createUserManga?libraryMangaId={id}");
        }
        else NavigationManager.NavigateTo("login");
    }

    private string GetImageUrl(string? url)
    {
        if (string.IsNullOrEmpty(url))
        {
            return LibraryMangaConstants.ImagePlaceHolder;
        }

        return url;
    }

    private async Task DeleteManga(int id)
    {
        try
        {
            bool isDeleteSuccess = await LibraryMangaService.DeleteManga(id, _token, _refreshToken);

            if (isDeleteSuccess)
            {
                Mangas = Mangas.Where(m => m.Id != id);
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            //ignore
        }
    }

}