@page "/orders"
@using BooksAPI.FE.Authentication
@using BooksAPI.FE.Constants
@using BooksAPI.FE.Contracts.Order
@using BooksAPI.FE.Interfaces
@using BooksAPI.FE.Util

@inject NavigationManager NavigationManager;
@inject IJSRuntime JsRuntime;
@inject IOrderService OrderService;
@inject AuthenticationStateProvider AuthenticationStateProvider;

@attribute [Authorize(Policy = ApplicationConstants.PolicyNames.UserRolePolicyName)]

<PageTitle>Orders</PageTitle>
<h3 class="text-center">Orders</h3>

@if (_isDataFetched)
{
    @if (_error)
    {
        <MudGrid Justify="Justify.Center">
            <MudItem md="4" xs="4">
                <MudAlert Severity="Severity.Error" ShowCloseIcon="true" CloseIconClicked="(() => CloseAlert())">
                    Unable to get orders. Please try again later.
                </MudAlert>
            </MudItem>
        </MudGrid>
    }
    else
    {
        <div class="d-flex justify-content-end mb-2">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => NavigationManager.NavigateTo("/createOrder"))">Add new order</MudButton>
        </div>

        <MudTable Items="_orders">
            <HeaderContent>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<OrderResponse, object>(x=> x.Date)" InitialDirection="SortDirection.Descending">Date</MudTableSortLabel>
                </MudTh>
                @* <MudTh>Date</MudTh> *@
                <MudTh>Place</MudTh>
                <MudTh>Description</MudTh>
                <MudTh>Price</MudTh>
                <MudTh>Count</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Date">
                    <MudText Typo="Typo.body1"> @context.Date.ToShortDateString()</MudText>
                </MudTd>
                <MudTd DataLabel="Place">
                    <MudText Typo="Typo.body1"> @context.Place</MudText>
                </MudTd>
                <MudTd DataLabel="Description" Class="w-50">
                    <MudText Typo="Typo.body1"> @context.Description</MudText>
                </MudTd>
                <MudTd DataLabel="Price">
                    <MudText Typo="Typo.body1"> @context.Amount</MudText>
                </MudTd>
                <MudTd DataLabel="Count">
                    <MudText Typo="Typo.body1"> @context.NumberOfItems</MudText>
                </MudTd>
                <MudTd DataLabel="Actions" Style="width: 10% !important;">
                    <div class="justify-content-center">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => NavigationManager.NavigateTo($"/updateOrder/?orderId={context.Id}"))">Update</MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => DeleteOrder(context.Id))" Class="mt-3">Delete</MudButton>
                    </div>
                </MudTd>
            </RowTemplate>
        </MudTable>
    }
}
else
{
    <div class="mt-4">
        <MudProgressLinear Color="Color.Primary" Size="Size.Large" Indeterminate="true" Class="my-7"/>
    </div>
}

@code {

    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }

    private bool _shouldRender = false;
    private bool _error = false;
    private bool _isDataFetched = false;

    private string _userId;
    private string _token;
    private string _refreshToken;

    private List<OrderResponse> _orders = new();

    protected override bool ShouldRender() => _shouldRender;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState state = await AuthenticationState;

        _userId = UserUtil.GetUserId(state.User);

        try
        {
            string[] tokens = await JsRuntime.InvokeAsync<string[]>("getTokens");
            _token = tokens[0];
            _refreshToken = tokens[1];
            await GetUserOrders();
            _isDataFetched = true;
        }
        catch (Exception e)
        {
            _isDataFetched = false;
        }
    }

    private async Task GetUserOrders()
    {
        try
        {
            _orders = await OrderService.GetUserOrders(_token, _refreshToken, _userId);
            _shouldRender = true;
            StateHasChanged();
        }
        catch (InvalidOperationException e)
        {
            ((CustomAuthenticationStateProvider)AuthenticationStateProvider).UpdateUserState("");

            NavigationManager.NavigateTo("/", true);
        }
        catch (Exception e)
        {
            _error = true;
            _shouldRender = true;
        }
    }

    private async Task DeleteOrder(int id)
    {
        try
        {
            bool isDeleteSuccess = await OrderService.DeleteOrder(id, _token, _refreshToken, _userId);

            //bool isDeleteSuccess = await UserMangaService.DeleteUserManga(id, _token, _refreshToken, _userId);
            if (isDeleteSuccess)
            {
                // UserMangaResponse? userMangaResponse = Mangas.FirstOrDefault(x => x.Id == id);
                // Mangas.Remove(userMangaResponse!);
                // StateHasChanged();

                OrderResponse? orderResponse = _orders.FirstOrDefault(x => x.Id == id);
                _orders.Remove(orderResponse!);
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            _error = true;
            StateHasChanged();
        }
    }

    private void CloseAlert()
    {
        _error = false;
        StateHasChanged();
    }

}