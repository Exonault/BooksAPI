@page "/orders"
@using BooksAPI.FE.Authentication
@using BooksAPI.FE.Constants
@using BooksAPI.FE.Contracts.Order
@using BooksAPI.FE.Interfaces
@using BooksAPI.FE.Util

@inject NavigationManager NavigationManager;
@inject IJSRuntime JsRuntime;
@inject IOrderService OrderService;
@inject AuthenticationStateProvider AuthenticationStateProvider;

@attribute [Authorize(Policy = ApplicationConstants.PolicyNames.UserRolePolicyName)]

<PageTitle>Orders</PageTitle>
<h3 class="text-center">Orders</h3>

@if (_isDataFetched)
{
    @if (_error)
    {
        <MudGrid Justify="Justify.Center">
            <MudItem md="4" xs="4">
                <MudAlert Severity="Severity.Error" ShowCloseIcon="true" CloseIconClicked="(() => CloseAlert())">
                    Unable to get orders. Please try again later.
                </MudAlert>
            </MudItem>
        </MudGrid>
    }
    else
    {
        <div class="d-flex justify-content-end mb-2">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => NavigationManager.NavigateTo("/createOrder"))">Add new order</MudButton>
        </div>

        <MudTabs Elevation="2" ApplyEffectsToContainer="true" Centered="true">
            <MudTabPanel Text="All">
                <OrderTable Orders="_orders"/>
            </MudTabPanel>
            
            <MudTabPanel Text="Status">
                <MudTabs Elevation="2" ApplyEffectsToContainer="true" Centered="true">
                    <MudTabPanel Text="Created">
                        <OrderTable Orders="_orders.Where(x=> x.Status == OrderConstants.Status.Created).ToList()"/>
                    </MudTabPanel>
                    <MudTabPanel Text="On the way">
                        <OrderTable Orders="_orders.Where(x=> x.Status == OrderConstants.Status.OnTheWay).ToList()"/>
                    </MudTabPanel>
                    <MudTabPanel Text="Delivered">
                        <OrderTable Orders="_orders.Where(x=> x.Status == OrderConstants.Status.Delivered).ToList()"/>
                    </MudTabPanel>
                </MudTabs>
            </MudTabPanel>
        </MudTabs>
    }
}
else
{
    <div class="mt-4">
        <MudProgressLinear Color="Color.Primary" Size="Size.Large" Indeterminate="true" Class="my-7"/>
    </div>
}

@code {

    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }

    private bool _shouldRender = false;
    private bool _error = false;
    private bool _isDataFetched = false;

    private string _userId;
    private string _token;
    private string _refreshToken;

    private List<OrderResponse> _orders = new();

    protected override bool ShouldRender() => _shouldRender;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState state = await AuthenticationState;

        _userId = UserUtil.GetUserId(state.User);

        try
        {
            string[] tokens = await JsRuntime.InvokeAsync<string[]>("getTokens");
            _token = tokens[0];
            _refreshToken = tokens[1];
            await GetUserOrders();
            _isDataFetched = true;
        }
        catch (Exception e)
        {
            _isDataFetched = false;
        }
    }

    private async Task GetUserOrders()
    {
        try
        {
            _orders = await OrderService.GetUserOrders(_token, _refreshToken, _userId);
            _shouldRender = true;
            StateHasChanged();
        }
        catch (InvalidOperationException e)
        {
            ((CustomAuthenticationStateProvider)AuthenticationStateProvider).UpdateUserState("");

            NavigationManager.NavigateTo("/", true);
        }
        catch (Exception e)
        {
            _error = true;
            _shouldRender = true;
        }
    }

    private void CloseAlert()
    {
        _error = false;
        StateHasChanged();
    }

}