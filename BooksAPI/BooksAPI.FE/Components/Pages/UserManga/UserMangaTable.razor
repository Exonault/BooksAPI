@using BooksAPI.FE.Authentication
@using BooksAPI.FE.Constants
@using BooksAPI.FE.Contracts.UserManga
@using BooksAPI.FE.Interfaces
@using BooksAPI.FE.Util

@inject NavigationManager NavigationManager;
@inject IUserMangaService UserMangaService;
@inject IJSRuntime JsRuntime;
@inject AuthenticationStateProvider AuthenticationStateProvider;

<MudTable Items="Mangas" Filter="new Func<UserMangaResponse, bool>(FilterFunc1)" @bind-SelectedItem="selectedItem">
    <ToolBarContent>
        <MudTextField @bind-Value="searchString" Placeholder="Search by Title" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"/>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Cover</MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<UserMangaResponse, object>(x => x.LibraryMangaResponse.TitleRomaji)">
                Title in Romaji
            </MudTableSortLabel>
        </MudTh>
        <MudTh>Reading status</MudTh>
        <MudTh>Collection status</MudTh>
        <MudTh>Collected volumes</MudTh>
        <MudTh>Read volumes</MudTh>
        <MudTh>Price per volume</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Cover">
            <MudImage Src="@GetImageUrl(context.LibraryMangaResponse.MainImageUrl)" Width="150" Height="210" Fluid="true" Class="border border-dark"/>
        </MudTd>
        <MudTd DataLabel="Title in Romaji" Style="width: 30% !important;">
            <MudText Typo="Typo.h6">@context.LibraryMangaResponse.TitleRomaji</MudText>
        </MudTd>
        <MudTd DataLabel="Reading status">
            <MudText Typo="Typo.body1">@UserMangaConstants.ReadingStatus.GetLabelByKey(context.ReadingStatus)</MudText>
        </MudTd>
        <MudTd DataLabel="Collection status">
            <MudText Typo="Typo.body1">@UserMangaConstants.CollectingStatus.GetLabelByKey(context.CollectionStatus)</MudText>
        </MudTd>
        <MudTd DataLabel="Collected volumes">
            <MudText Typo="Typo.body1">@context.CollectedVolumes</MudText>
        </MudTd>
        <MudTd DataLabel="Read volumes">
            <MudText Typo="Typo.body1">@context.ReadVolumes</MudText>
        </MudTd>
        <MudTd>
            <MudText Typo="Typo.body1">@context.PricePerVolume</MudText>
        </MudTd>
        <MudTd DataLabel="Actions" Style="width: 10% !important;">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-3"
                       OnClick="@(() => NavigationManager.NavigateTo($"libraryMangaInformation?libraryMangaId={context.LibraryMangaResponse.Id}"))">
                Information
            </MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-3"
                       OnClick="@(() => NavigationManager.NavigateTo($"/updateUserManga?userMangaId={context.Id}"))">
                Update
            </MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-3" OnClick="() => DeleteManga(context.Id)">Delete</MudButton>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 5, 10, 25,}" />
    </PagerContent>
</MudTable>

@code {

    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }

    [Parameter]
    public List<UserMangaResponse> Mangas { get; set; }

    private UserMangaResponse selectedItem;
    private string searchString;

    private string _token;
    private string _refreshToken;
    private string _userId;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState state = await AuthenticationState;

        _userId = UserUtil.GetUserId(state.User);

        try
        {
            string[] tokens = await JsRuntime.InvokeAsync<string[]>("getTokens");
            _token = tokens[0];
            _refreshToken = tokens[1];
        }
        catch (Exception e)
        {
            StateHasChanged();
        }
    }

    private bool FilterFunc1(UserMangaResponse element) => FilterFunc(element, searchString);

    private bool FilterFunc(UserMangaResponse element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
        {
            return true;
        }

        if (element.LibraryMangaResponse.TitleRomaji.Contains(searchString))
        {
            return true;
        }

        return false;
    }


    private string GetImageUrl(string? url)
    {
        if (string.IsNullOrEmpty(url))
        {
            return LibraryMangaConstants.ImagePlaceHolder;
        }

        return url;
    }

    private async Task DeleteManga(int id)
    {
        try
        {
            bool isDeleteSuccess = await UserMangaService.DeleteUserManga(id, _token, _refreshToken, _userId);
            if (isDeleteSuccess)
            {
                UserMangaResponse? userMangaResponse = Mangas.FirstOrDefault(x => x.Id == id);
                Mangas.Remove(userMangaResponse!);
                StateHasChanged();
            }
        }
        catch (InvalidOperationException e)
        {
            ((CustomAuthenticationStateProvider)AuthenticationStateProvider).UpdateUserState("");

            NavigationManager.NavigateTo("/", true);
        }
        catch (Exception e)
        {
            //ignore
        }
    }

}