@page "/createUserManga"
@page "/updateUserManga"
@using System.Text.Json
@using BooksAPI.FE.Constants
@using BooksAPI.FE.Contracts.LibraryManga
@using BooksAPI.FE.Extensions
@using BooksAPI.FE.Interfaces
@using BooksAPI.FE.Model
@using BooksAPI.FE.Util

@inject NavigationManager NavigationManager;
@inject IUserMangaService UserMangaService;
@inject ILibraryMangaService LibraryMangaService;
@inject IJSRuntime JsRuntime;


<h3 class="text-center">
    @("Create a new entry")
</h3>

@if (_error)
{
    <MudGrid Justify="Justify.Center">
        <MudItem md="4" xs="4">
            <MudAlert Severity="Severity.Error" ShowCloseIcon="true" CloseIconClicked="(() => CloseAlert())">
                @("Unable to create manga. Try again later")
            </MudAlert>
        </MudItem>
    </MudGrid>
}


@if (_isDataFetched && _libraryManga is not null)
{
    <EditForm Model="_model" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator/>

        @if (context.GetValidationMessages().Count() != 0)
        {
            <MudGrid Justify="Justify.Center">
                <MudItem md="4" xs="4">
                    <MudAlert Severity="Severity.Error">
                        <ValidationSummary/>
                    </MudAlert>
                </MudItem>
            </MudGrid>
        }
        <MudGrid Justify="Justify.Center">
            <MudItem xs="7">
                <h4 class="text-center">Library manga information</h4>
                <MudCard Outlined="true" Class="mt-3">
                    <MudCardContent>
                        <div class="col-12">
                            <div class="row mb-3">
                                <MudText Typo="Typo.h5" Align="Align.Center">Title</MudText>
                                <MudText Typo="Typo.h6" Align="Align.Center">@_libraryManga.Title</MudText>
                            </div>
                            <div class="row">
                                <div class="col mr-2">
                                    <MudText Typo="Typo.h5">Demographic</MudText>
                                    <MudText Typo="Typo.h6">@_libraryManga.DemographicType</MudText>
                                </div>
                                <div class="col mr-2">
                                    <MudText Typo="Typo.h5">Type</MudText>
                                    <MudText Typo="Typo.h6">@LibraryMangaConstants.Type.GetLabelByKey(_libraryManga.Type)</MudText>
                                </div>
                                <div class="col mr-2">
                                    <MudText Typo="Typo.h5">Publishing status</MudText>
                                    <MudText Typo="Typo.h6">@LibraryMangaConstants.PublishingType.GetLabelByKey(_libraryManga.PublishingStatus)</MudText>
                                </div>
                                <div class="col">
                                    <MudText Typo="Typo.h5">Total volumes</MudText>
                                    <MudText Typo="Typo.h6">@FormatterUtil.FormatTotalVolumes(_libraryManga.TotalVolumes)</MudText>
                                </div>
                            </div>
                        </div>
                    </MudCardContent>
                </MudCard>

                <h4 class="text-center mt-5">User information</h4>
                <div class="d-flex col-12 mt-2">
                    <MudSelect Label="Reading status" Variant="Variant.Text" AnchorOrigin="Origin.BottomCenter" Class="mr-3" @bind-Value="_model.ReadingStatus">
                        <MudSelectItem Value="UserMangaConstants.ReadingStatus.GetLabelByKey(UserMangaConstants.ReadingStatus.Reading)"/>
                        <MudSelectItem Value="UserMangaConstants.ReadingStatus.GetLabelByKey(UserMangaConstants.ReadingStatus.Finished)"/>
                        <MudSelectItem Value="UserMangaConstants.ReadingStatus.GetLabelByKey(UserMangaConstants.ReadingStatus.OnHold)"/>
                        <MudSelectItem Value="UserMangaConstants.ReadingStatus.GetLabelByKey(UserMangaConstants.ReadingStatus.Dropped)"/>
                        <MudSelectItem Value="UserMangaConstants.ReadingStatus.GetLabelByKey(UserMangaConstants.ReadingStatus.PlanToRead)"/>
                    </MudSelect>

                    <MudSelect Label="Collecting status" Variant="Variant.Text" AnchorOrigin="Origin.BottomCenter" Class="mr-3" @bind-Value="_model.CollectionStatus">
                        <MudSelectItem Value="UserMangaConstants.CollectingStatus.GetLabelByKey(UserMangaConstants.CollectingStatus.InProgress)"/>
                        <MudSelectItem Value="UserMangaConstants.CollectingStatus.GetLabelByKey(UserMangaConstants.CollectingStatus.Collected)"/>
                        <MudSelectItem Value="UserMangaConstants.CollectingStatus.GetLabelByKey(UserMangaConstants.CollectingStatus.PlanToCollect)"/>
                    </MudSelect>
                </div>
                <div class="d-flex col-12">
                    <MudTextField Label="Price per volume" Variant="Variant.Text" InputType="InputType.Text" Class="mr-3"
                                  @bind-Value="_model.Price"/>

                    <MudTextField Label="Collected volume" Variant="Variant.Text" InputType="InputType.Text" Class="mr-3"
                                  @bind-Value="_model.CollectedVolumes"/>

                    <MudTextField Label="Read volume" Variant="Variant.Text" InputType="InputType.Text" Class="mr-3"
                                  @bind-Value="_model.ReadVolumes"/>
                </div>
            </MudItem>
        </MudGrid>

    </EditForm>
}
else if (!_isDataFetched)
{
    <div class="mt-4">
        <MudProgressLinear Color="Color.Primary" Size="Size.Large" Indeterminate="true" Class="my-7"/>
    </div>
}

@code {

    [CascadingParameter] private Task<AuthenticationState>? AuthenticationState { get; set; }

    private int _userMangaId = 0;
    private int _libraryMangaId = 0;

    private bool _isCreate;
    private bool _isUpdate;
    private bool _error;
    private bool _isDataFetched = false;

    private string _userId;
    private string _token;
    private string _refreshToken;

    private UserMangaModel _model = new();

    private LibraryMangaResponse? _libraryManga;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            AuthenticationState state = await AuthenticationState;

            _userId = UserUtil.GetUserId(state.User);

            string[] tokens = await JsRuntime.InvokeAsync<string[]>("getTokens");
            _token = tokens[0];
            _refreshToken = tokens[1];

            NavigationManager.GetQueryString<int>("libraryMangaId", out _libraryMangaId);
            NavigationManager.GetQueryString<int>("userMangaId", out _userMangaId);

            _isCreate = _userMangaId == 0;
            // _isUpdate = _libraryMangaId == 0;

            if (_isCreate)
            {
                _libraryManga = await LibraryMangaService.GetManga(_libraryMangaId);
                _isDataFetched = true;
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            _error = true;
            _isDataFetched = true;
        }
    }

    private void OnValidSubmit()
    {
        FormatModel();
        
        Console.WriteLine(JsonSerializer.Serialize(_model, new JsonSerializerOptions
        {
            WriteIndented = true
        }));
    }

    private void FormatModel()
    {
        _model.ReadingStatus = UserMangaConstants.ReadingStatus.GetKeyByLabel(_model.ReadingStatus);
        _model.CollectionStatus = UserMangaConstants.CollectingStatus.GetKeyByLabel(_model.CollectionStatus);
    }

    private void CloseAlert()
    {
        _error = false;
        StateHasChanged();
    }

}