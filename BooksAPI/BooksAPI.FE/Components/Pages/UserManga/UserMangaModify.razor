@page "/createUserManga"
@page "/updateUserManga"

@attribute [Authorize(Policy = ApplicationConstants.PolicyNames.UserRolePolicyName)]


@using BooksAPI.FE.Authentication
@using BooksAPI.FE.Constants
@using BooksAPI.FE.Contracts.LibraryManga
@using BooksAPI.FE.Extensions
@using BooksAPI.FE.Interfaces
@using BooksAPI.FE.Model
@using BooksAPI.FE.Util



@inject NavigationManager NavigationManager;
@inject IUserMangaService UserMangaService;
@inject ILibraryMangaService LibraryMangaService;
@inject IJSRuntime JsRuntime;
@inject AuthenticationStateProvider AuthenticationStateProvider;

<PageTitle>@(_isCreate ? "Create" : "Update")</PageTitle>

<h3 class="text-center">
    @(_isCreate ? "Create a new entry" : "Update current entry")
</h3>

@if (_error)
{
    <MudGrid Justify="Justify.Center">
        <MudItem md="4" xs="4">
            <MudAlert Severity="Severity.Error" ShowCloseIcon="true" CloseIconClicked="(() => CloseAlert())">
                @_errorMessage
            </MudAlert>
        </MudItem>
    </MudGrid>
}


@if (_isDataFetched && _libraryManga is not null)
{
    <EditForm Model="_model" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator/>

        @if (context.GetValidationMessages().Count() != 0)
        {
            <MudGrid Justify="Justify.Center">
                <MudItem md="4" xs="4">
                    <MudAlert Severity="Severity.Error">
                        <ValidationSummary/>
                    </MudAlert>
                </MudItem>
            </MudGrid>
        }
        <MudGrid Justify="Justify.Center">
            <MudItem xs="6">
                <h4 class="text-center">Library manga information</h4>

                <MudCard Outlined="true" Class="mt-3">
                    <MudCardContent>
                        <div class="d-flex flex-wrap mt-1">
                            <div class="d-flex flex-column align-items-start mr-2">
                                <MudImage Src="@GetImageUrl(_libraryManga.MainImageUrl)" Width="150" Height="210" Class="border border-dark"/>
                            </div>
                            <div class="col-12 col-md-6 ml-4">
                                <div class="row mb-2">
                                    <div class="col">
                                        <MudText Typo="Typo.h6">Title in Romaji</MudText>
                                        <MudText Typo="Typo.body1">@_libraryManga.TitleRomaji</MudText>
                                    </div>
                                </div>
                                <div class="row mb-2">
                                    <div class="col">
                                        <MudText Typo="Typo.h6">Demographic</MudText>
                                        <MudText Typo="Typo.body1">@_libraryManga.DemographicType</MudText>
                                    </div>
                                    <div class="col">
                                        <MudText Typo="Typo.h6">Type</MudText>
                                        <MudText Typo="Typo.body1">@LibraryMangaConstants.Type.GetLabelByKey(_libraryManga.Type)</MudText>
                                    </div>

                                </div>
                                <div class="row mb-2">
                                    <div class="col">
                                        <MudText Typo="Typo.h6">Publishing status</MudText>
                                        <MudText Typo="Typo.body1">@LibraryMangaConstants.PublishingType.GetLabelByKey(_libraryManga.PublishingStatus)</MudText>
                                    </div>
                                    <div class="col">
                                        <MudText Typo="Typo.h6">Total volumes</MudText>
                                        <MudText Typo="Typo.body1">@FormatterUtil.FormatTotalVolumes(_libraryManga.TotalVolumes)</MudText>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </MudCardContent>
                </MudCard>

                <h4 class="text-center mt-5">User information</h4>
                <div class="d-flex col-12 mt-2">
                    <MudSelect Label="Reading status" Variant="Variant.Text" AnchorOrigin="Origin.BottomCenter" Class="mr-3" @bind-Value="_model.ReadingStatus">
                        <MudSelectItem Value="@UserMangaConstants.ReadingStatus.Reading">Reading</MudSelectItem>
                        <MudSelectItem Value="@UserMangaConstants.ReadingStatus.Finished">Finished</MudSelectItem> 
                        <MudSelectItem Value="@UserMangaConstants.ReadingStatus.OnHold">On hold</MudSelectItem>
                        <MudSelectItem Value="@UserMangaConstants.ReadingStatus.Dropped">Dropped</MudSelectItem>
                        <MudSelectItem Value="@UserMangaConstants.ReadingStatus.PlanToRead">Plan to read</MudSelectItem>
                    </MudSelect>

                    <MudSelect Label="Collecting status" Variant="Variant.Text" AnchorOrigin="Origin.BottomCenter" Class="mr-3" @bind-Value="_model.CollectionStatus">
                        <MudSelectItem Value="@UserMangaConstants.CollectingStatus.InProgress">In progress</MudSelectItem>
                        <MudSelectItem Value="@UserMangaConstants.CollectingStatus.Collected">Collected</MudSelectItem>
                        <MudSelectItem Value="@UserMangaConstants.CollectingStatus.PlanToCollect">Plan to collect</MudSelectItem>
                    </MudSelect>
                </div>
                <div class="d-flex col-12">
                    <MudNumericField T="decimal" HideSpinButtons="true" Min="0" Format="F2" Label="Price for 1 volume" Variant="Variant.Text" Class="mr-3"
                                     @bind-Value="_model.PricePerVolume"/>

                    <MudNumericField T="int" HideSpinButtons="true" Min="0" Label="Collected volume" Variant="Variant.Text" Class="mr-3"
                                     @bind-Value="_model.CollectedVolumes"/>

                    <MudNumericField T="int" HideSpinButtons="true" Min="0" Label="Read volume" Variant="Variant.Text" Class="mr-3"
                                     @bind-Value="_model.ReadVolumes"/>
                </div>

                <br/>
                <div class="d-flex justify-content-center">
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">@(_isCreate ? "Create" : "Update")</MudButton>
                </div>
            </MudItem>
        </MudGrid>

    </EditForm>
}
else if (!_isDataFetched)
{
    <div class="mt-4">
        <MudProgressLinear Color="Color.Primary" Size="Size.Large" Indeterminate="true" Class="my-7"/>
    </div>
}

@code {

    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }

    private int _userMangaId = 0;
    private int _libraryMangaId = 0;

    private bool _isCreate;
    private bool _error;
    private bool _isDataFetched;

    private string _userId;
    private string _token;
    private string _refreshToken;

    private string _errorMessage = "Unable to create manga. Try again later";

    private UserMangaModel _model = new();

    private LibraryMangaResponse? _libraryManga;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            AuthenticationState state = await AuthenticationState;

            _userId = UserUtil.GetUserId(state.User);

            string[] tokens = await JsRuntime.InvokeAsync<string[]>("getTokens");
            _token = tokens[0];
            _refreshToken = tokens[1];

            NavigationManager.GetQueryString<int>("libraryMangaId", out _libraryMangaId);
            NavigationManager.GetQueryString<int>("userMangaId", out _userMangaId);

            _isCreate = _userMangaId == 0;

            if (_isCreate)
            {
                _libraryManga = await LibraryMangaService.GetManga(_libraryMangaId);
                _model.LibraryMangaId = _libraryMangaId;
                _model.LibraryMangaResponse = _libraryManga;
                _isDataFetched = true;
                StateHasChanged();
            }
            else
            {
                _model = await UserMangaService.GetUserMangaModel(_userMangaId, _token, _refreshToken, _userId);
                _libraryManga = _model.LibraryMangaResponse;
                _libraryMangaId = _model.LibraryMangaId;
                _isDataFetched = true;
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            _error = true;
            _errorMessage = _isCreate? "Unable to create manga. Try again later" : "Unable to update manga. Try again later";
            _isDataFetched = true;
            StateHasChanged();
        }
    }

    private async Task OnValidSubmit()
    {
        try
        {
            _model.LibraryMangaId = _libraryMangaId;
            
            if (_isCreate)
            {
                bool createSuccessful = await UserMangaService.CreateUserManga(_model, _token, _refreshToken, _userId);

                if (createSuccessful)
                {
                    NavigationManager.NavigateTo("libraryMangas");
                }
            }
            else
            {
                bool updateSuccessful = await UserMangaService.UpdateUserManga(_userMangaId, _model, _token, _refreshToken, _userId);

                if (updateSuccessful)
                {
                    NavigationManager.NavigateTo("userMangas");
                }
            }
        }
        catch (InvalidOperationException e)
        {
            ((CustomAuthenticationStateProvider)AuthenticationStateProvider).UpdateUserState("");

            NavigationManager.NavigateTo("/", true);
        }
        catch (Exception e)
        {
            _error = true;
            _errorMessage = "Error";
            StateHasChanged();
        }
    }

    private string GetImageUrl(string? url)
    {
        if (string.IsNullOrEmpty(url))
        {
            return LibraryMangaConstants.ImagePlaceHolder;
        }

        return url;
    }

    private void CloseAlert()
    {
        _error = false;
        StateHasChanged();
    }

}