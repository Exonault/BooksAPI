@page "/register"
@using BooksAPI.FE.Contracts.User
@using BooksAPI.FE.Interfaces
@using BooksAPI.FE.Model
@inject IUserService UserService
@inject NavigationManager NavigationManager

<PageTitle>Register</PageTitle>
<h3 class="text-center mb-4">Register</h3>

@if (_error)
{
<div class="d-flex justify-center mb-5">
    <MudItem xs="4">
        <MudAlert Severity="Severity.Error" Variant="Variant.Filled">
            Error occured
        </MudAlert>
    </MudItem>
</div>
}
<EditForm Model="_model" OnValidSubmit="OnValidSubmit" class="d-flex justify-center">
    <DataAnnotationsValidator/>
    <MudItem xs="4">
        <MudCard Outlined="true">
            <MudCardContent>
                <MudTextField Label="Username" @bind-Value="_model.Username" For="@(() => _model.Username)"/>
                <MudTextField Label="Email" Class="mt-3" @bind-Value="_model.Email" For="@(() => _model.Email)"/>
                <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                              @bind-Value="_model.Password" For="@(() => _model.Password)" InputType="InputType.Password"/>
                <MudTextField Label="Confirm Password" HelperText="Repeat the password" Class="mt-3"
                              @bind-Value="_model.ConfirmPassword" For="@(() => _model.ConfirmPassword)" InputType="InputType.Password"/>
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Register</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
</EditForm>

@code {
    RegisterModel _model = new();
    private bool _shouldRender = false;
    private bool _error = false;

    protected override bool ShouldRender() => _shouldRender;

    private async void OnValidSubmit()
    {
        RegisterResponse? registerResponse = await UserService.Register(_model);
        if (registerResponse is not null)
        {
            if (!registerResponse.Successful)
            {
                _error = true;
                _shouldRender = true;
                StateHasChanged();
            }
            else
            {
                NavigationManager.NavigateTo("/");
            }
        }
        else
        {
            _error = true;
            _shouldRender = true;
            StateHasChanged();
        }
    }


}