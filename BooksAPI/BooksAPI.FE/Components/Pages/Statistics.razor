@page "/statistics"
@using BooksAPI.FE.Authentication
@using BooksAPI.FE.Constants
@using BooksAPI.FE.Contracts.Statistics.Order
@using BooksAPI.FE.Contracts.Statistics.UserManga
@using BooksAPI.FE.Interfaces
@using BooksAPI.FE.Util

@inject NavigationManager NavigationManager;
@inject IJSRuntime JsRuntime;
@inject IStatisticsService StatisticsService;
@inject AuthenticationStateProvider AuthenticationStateProvider;

@attribute [Authorize(Policy = ApplicationConstants.PolicyNames.UserRolePolicyName)]

<PageTitle>Statistics</PageTitle>
<h3 class="text-center">Statistics</h3>

@if (_error)
{
    <MudGrid Justify="Justify.Center">
        <MudItem md="4" xs="4">
            <MudAlert Severity="Severity.Error" ShowCloseIcon="true" CloseIconClicked="(() => CloseAlert())">
                Unable to get statistics. Please try again later.
            </MudAlert>
        </MudItem>
    </MudGrid>
}
else
{
    <MudTabs Elevation="2" ApplyEffectsToContainer="true" Centered="true">
        <MudTabPanel Text="Collection">
            <div>
                <div id="@DemographicChartId" style="width:100%; max-width:600px; height:500px;"></div>
                <div id="@TypeChartId" style="width:100%; max-width:600px; height:500px;"></div>
            </div>
        </MudTabPanel>
    </MudTabs>
}

@* @if (_isDataFetched) *@
@* { *@
@*     @if (_error) *@
@*     { *@
@*         <MudGrid Justify="Justify.Center"> *@
@*             <MudItem md="4" xs="4"> *@
@*                 <MudAlert Severity="Severity.Error" ShowCloseIcon="true" CloseIconClicked="(() => CloseAlert())"> *@
@*                     Unable to get statistics. Please try again later. *@
@*                 </MudAlert> *@
@*             </MudItem> *@
@*         </MudGrid> *@
@*     } *@
@*     else *@
@*     { *@
@*         <MudTabs Elevation="2" ApplyEffectsToContainer="true" Centered="true"> *@
@*             <MudTabPanel Text="Collection"> *@
@*                 <div> *@
@*                     <div id="@DemographicChartId" style="width:100%; max-width:600px; height:500px;"></div> *@
@*                     <div id="@TypeChartId" style="width:100%; max-width:600px; height:500px;"></div> *@
@*                 </div> *@
@*             </MudTabPanel> *@
@*         </MudTabs> *@
@*     } *@
@* } *@
@* else *@
@* { *@
@*     <div class="mt-4"> *@
@*         <MudProgressLinear Color="Color.Primary" Size="Size.Large" Indeterminate="true" Class="my-7"/> *@
@*     </div> *@
@* } *@


@* @if (!_isDataFetched) *@
@* { *@
@*     <div class="mt-4"> *@
@*         <MudProgressLinear Color="Color.Primary" Size="Size.Large" Indeterminate="true" Class="my-7"/> *@
@*     </div> *@
@* } *@
@* <MudTabs Elevation="2" ApplyEffectsToContainer="true" Centered="true"> *@
@*     <MudTabPanel Text="Collection"> *@
@*         <div> *@
@*             <div id="@DemographicChartId" style="width:100%; max-width:600px; height:500px;"></div> *@
@*             <div id="@TypeChartId" style="width:100%; max-width:600px; height:500px;"></div> *@
@*         </div> *@
@*     </MudTabPanel> *@
@* </MudTabs> *@


@code {

    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }

    private const string DemographicChartId = "demographicChart";
    private const string TypeChartId = "typeChart";

    private bool _shouldRender = false;
    private bool _error = false;
    private bool _isDataFetched = false;

    private string _userId;

    private string _token;
    private string _refreshToken;

    private List<UserMangaDemographicResponse> _demographicStatistic = new();

    private List<UserMangaTypeResponse> _typeStatistic = new();

    private List<UserMangaReadingStatusResponse> _readingStatusStatistics = new();

    private List<UserMangaCollectionStatusResponse> _collectionStatusStatistics = new();

    private List<UserMangaPublishingStatusResponse> _publishingStatusStatistics = new();

    private GeneralStatisticsResponse _generalStatistics = new();

    private UserMangaTotalSpendingResponse _totalSpendingStatistics = new();

    private List<OrderByPlaceResponse> _orderByPlaceStatistics = new();

    private List<OrdersByYearResponse> _orderByYearStatistics = new();

    protected override bool ShouldRender() => _shouldRender;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState state = await AuthenticationState;

        _userId = UserUtil.GetUserId(state.User);
        try
        {
            string[] tokens = await JsRuntime.InvokeAsync<string[]>("getTokens");
            _token = tokens[0];
            _refreshToken = tokens[1];
        }
        catch (Exception e)
        {
            _isDataFetched = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await GetAllStatistics();

                await GenerateAllCharts();
            }
            catch (InvalidOperationException e)
            {
                ((CustomAuthenticationStateProvider)AuthenticationStateProvider).UpdateUserState("");

                NavigationManager.NavigateTo("/", true);
            }
            catch (Exception e)
            {
                _error = true;
                StateHasChanged();
                Console.WriteLine(e.Message);
                // _shouldRender = true;
                // StateHasChanged();
            }
        }
    }

    private async Task GetAllStatistics()
    {
        _demographicStatistic = await StatisticsService.GetDemographicStatistics(_token, _refreshToken, _userId);
        _typeStatistic = await StatisticsService.GetTypeStatistics(_token, _refreshToken, _userId);
        _collectionStatusStatistics = await StatisticsService.GetCollectionStatusStatistics(_token, _refreshToken, _userId);
        _publishingStatusStatistics = await StatisticsService.GetPublishingStatusStatistics(_token, _refreshToken, _userId);
        _readingStatusStatistics = await StatisticsService.GetReadingStatusStatistics(_token, _refreshToken, _userId);

        _generalStatistics = await StatisticsService.GetGeneralStatisticsResponse(_token, _refreshToken, _userId);
        _totalSpendingStatistics = await StatisticsService.GetTotalSpendingStatistics(_token, _refreshToken, _userId);

        _orderByYearStatistics = await StatisticsService.GetOrderByYear(_token, _refreshToken, _userId);
        _orderByPlaceStatistics = await StatisticsService.GetOrderByPlaceStatistics(_token, _refreshToken, _userId);

        _isDataFetched = true;
        StateHasChanged();
    }

    private async Task GenerateAllCharts()
    {
        await JsRuntime.InvokeVoidAsync("generateDemographicChart", _demographicStatistic, DemographicChartId);
        await JsRuntime.InvokeVoidAsync("generateTypeChart", _typeStatistic, TypeChartId);
    }

    private void CloseAlert()
    {
        _error = false;
        StateHasChanged();
    }

}