@page "/statistics"
@using BooksAPI.FE.Authentication
@using BooksAPI.FE.Constants
@using BooksAPI.FE.Contracts.Statistics.UserManga
@using BooksAPI.FE.Interfaces
@using BooksAPI.FE.Util

@inject NavigationManager NavigationManager;
@inject IJSRuntime JsRuntime;
@inject IStatisticsService StatisticsService;
@inject AuthenticationStateProvider AuthenticationStateProvider;

@attribute [Authorize(Policy = ApplicationConstants.PolicyNames.UserRolePolicyName)]

<PageTitle>Statistics</PageTitle>
<h3 class="text-center">Statistics</h3>

<div id="myChart" style="width:100%; max-width:600px; height:500px;"></div>


@code {

    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }

    private bool _shouldRender = false;
    private bool _error = false;
    private bool _isDataFetched = false;

    private string _userId;

    private IEnumerable<UserMangaDemographicResponse> _demographicStatistic =
        Array.Empty<UserMangaDemographicResponse>();


    protected override bool ShouldRender() => _shouldRender;

    protected override async Task OnInitializedAsync()
    {
        try
        {
          
        }
        catch (Exception e)
        {
            _isDataFetched = false;
        }
        
        AuthenticationState state = await AuthenticationState;
        
        _userId = UserUtil.GetUserId(state.User);
        
        string[] tokens;
        try
        {
            tokens = await JsRuntime.InvokeAsync<string[]>("getTokens");
            await GetStatistics(tokens);
            _isDataFetched = true;
        }
        catch (Exception e)
        {
            _isDataFetched = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            await JsRuntime.InvokeVoidAsync("test");
        }
        catch (Exception e)
        {
            _isDataFetched = false;
        }
    }

    private async Task GetStatistics(string[] tokens)
    {
        // _demographicStatistic = await StatisticsService.GetDemographicStatistics(tokens[0], tokens[1], _userId);
        try
        {
            _shouldRender = true;
            StateHasChanged();
        }
        catch (InvalidOperationException e)
        {
            ((CustomAuthenticationStateProvider)AuthenticationStateProvider).UpdateUserState("");

            NavigationManager.NavigateTo("/", true);
        }
        catch (Exception e)
        {
            _error = true;
            _shouldRender = true;
        }
    }

    private void CloseAlert()
    {
        _error = false;
        StateHasChanged();
    }

}