@page "/"
@using BooksAPI.FE.Constants
@using BooksAPI.FE.Contracts.Author
@using BooksAPI.FE.Contracts.LibraryManga
@using BooksAPI.FE.Interfaces
@using BooksAPI.FE.Util
@attribute [AllowAnonymous]

@inject ILibraryMangaService LibraryMangaService;
@inject NavigationManager NavigationManager;

<PageTitle>Home</PageTitle>

@if (_error)
{
    <MudGrid Justify="Justify.Center">
        <MudItem md="4" xs="4">
            <MudAlert Severity="Severity.Error" ShowCloseIcon="true" CloseIconClicked="(() => CloseAlert())">
              Search must not be empty
            </MudAlert>
        </MudItem>
    </MudGrid>
}

<h1>Welcome!</h1>

<div class="d-flex justify-content-center flex-row mb-5 w-75">
    <MudTextField @bind-Value="SearchQuery" Variant="Variant.Outlined"
                  T="string" Label="Search library mangas by title"
                  InputType="InputType.Text" FullWidth="false"/>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@(Search)" Class="ml-2">Search</MudButton>
</div>

@if (_isDataFetching)
{
    <div class="mt-4">
        <MudProgressLinear Color="Color.Primary" Size="Size.Large" Indeterminate="true" Class="my-7"/>
    </div>
}

@if (_searchDone)
{
    <MudTable Items="SearchResult">
        <HeaderContent>
            <MudTh>Cover</MudTh>
            <MudTh>Title</MudTh>
            <MudTh>Authors</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Cover">
                <MudImage Src="@context.MainImageUrl" Width="100" Height="140" Fluid="true"/>
            </MudTd>
            <MudTd DataLabel="Title" Class="w-50">
                <MudText Typo="Typo.h6">@context.Title</MudText>
            </MudTd>
            <MudTd DataLabel="Authors">
                @foreach (AuthorResponse author in context.Authors)
                {
                    <MudText Typo="Typo.body1" Class="mt-1"> @FormatterUtil.FormatAuthor(author)</MudText>
                }
            </MudTd>
            <MudTd DataLabel="Actions" Style="width: 15% !important">
                <AuthorizeView Policy="@ApplicationConstants.PolicyNames.AdminRolePolicyName">
                    <Authorized Context="authorizedContext">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary"
                                   OnClick="@(() => NavigationManager.NavigateTo($"/updateLibraryManga/{context.Id}"))">
                            Update information
                        </MudButton>
                    </Authorized>
                </AuthorizeView>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-3"
                           OnClick="@(() => NavigationManager.NavigateTo($"libraryMangaInfo/{context.Id}"))">
                    More information
                </MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-3"
                           OnClick="@(() => AddToCollectionAction(context.Id))">
                    Add to collection
                </MudButton>

            </MudTd>
        </RowTemplate>
    </MudTable>
}

@code{

    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }

    public string SearchQuery { get; set; }

    private IEnumerable<LibraryMangaResponse> SearchResult = Array.Empty<LibraryMangaResponse>();
    private bool _searchDone = false;
    private bool _shouldRender = false;
    private bool _error = false;
    private bool _isDataFetching = false;

    protected override bool ShouldRender() => _shouldRender;

    private async Task Search()
    {
        if (string.IsNullOrEmpty(SearchQuery))
        {
            _error = true;
            _shouldRender = true;
            StateHasChanged();
            return;
        }

        _isDataFetching = true;
        _shouldRender = true;
        StateHasChanged();
        
        try
        {
            SearchResult = await LibraryMangaService.SearchManga(SearchQuery);
            _searchDone = true;
            _shouldRender = true;
            _isDataFetching = false;
        }
        catch (Exception e)
        {
            _error = true;
            _shouldRender = true;
            _isDataFetching = false;
        }
    }

    private async Task AddToCollectionAction(int id)
    {
        AuthenticationState state = await AuthenticationState;

        if (state.User.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo($"/createUserManga/{id}");
        }
        else NavigationManager.NavigateTo("login");
    }


    private void CloseAlert()
    {
        _error = false;
        StateHasChanged();
    }

}